{
  "version": 3,
  "sources": [
    "../../ai_registry/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BQ;AAAiB;;AAAjB;AACA;AAAa;;AAAb;AALR;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AAuJK;;AAAA;AAAA;AAAA;;AAAA;AAvJL;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAuJK;;;AAAA;;AAzCA;;AAAA;AAAA;AAAA;;AAAA;AA9GL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA8GK;;;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AA1EL;;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AA0EK;;;AAAA;;AAxDA;;AAAA;AAAA;AAAA;;AAAA;AAlBL;;;AAAA;;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAkBK;;;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAXL;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAWK;;;AAAA;;AAXL;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA;;;AAGe;AAAA;AAAA;AAAA;AAAkB;;AAAlB;AAAP;AACA;AAAA;;AAAA;AACA;AAAA;;AAAA;;AAER;;;AASe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAYI;;AAAA;AACE;;AAAA;AADF;AAEE;;AAAA;AAFF;AAIJ;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAER;;;AASe;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AAGsB;;AAAf;;AAAA;AAAA;AAAA;AAAA;;AAAP;AAGmB;AAAA;AAGG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAR;AACO;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAR;AACS;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAR;AAGP;;AAAA;;AAAA;AAAP;AAGO;;AAAA;;AAAA;AAAP;AACO;;AAAA;AAAP;;AAER;;;AASsB;;;AAAM;AAApB;;;AAEG;AAAA;AAAA;;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGJ;;AAA4C;AAA5C;;AAA+D;;AAA/D;;;AAII;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAGU;;AAAR;AAHF;AAOG;;AAAA;;AAAA;AAAP;AAKA;;;;;;;;;AAAA;;;AAAmD;;;;AAAnD;AAGwB;;AAAxB;AAAA;AAAA;AAAA;;AAER;;;AASsB;;;AAAM;AAApB;;;AAEG;AAAA;AAAA;;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAGJ;;AAA4C;AAA5C;;AAA+D;;AAA/D;;;AAKM;;AAAA;AADF;;AAAA;AAAA;AAEE;;AAAA;AAFF;AAGU;;AAAR;AAHF;AAOG;;AAAA;;AAAA;AAAP;AAKA;;;;;;;;;;;;;AAAA;;;;AAIQ;;;AAJR;AAQwB;;AAAxB;AAAA;AAAA;AAAA;;AAER;;;AAOsB;;;AAAM;AAApB;;;AAEG;AAAA;AAAA;;AAAX;;;AACmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwB;;AAAxB;AAAP;AAIJ;;AACiB;;AAAW;AAAW;;AADvC;;;AAKoB;;AAAA;AAA4B;;AAAR;AAApB;AAGb;;AAAA;;AAAA;AAAP;AAMK;AACc;;;;;;AACF;;;;;AAFZ;;;;AAIG;;;;AAJH;AAQmB;;AAAxB;AAAA;AAAA;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.ai_registry.contract.AiRegistry.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 8 16 100000"
    },
    "10": {
      "op": "bytecblock 0x6c76 \"lsig_addr\" \"admin\" 0x068101 0x6170"
    },
    "38": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "40": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "43": {
      "op": "bytec_1 // \"lsig_addr\"",
      "defined_out": [
        "\"lsig_addr\""
      ],
      "stack_out": [
        "\"lsig_addr\""
      ]
    },
    "44": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"lsig_addr\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"lsig_addr\"",
        "new_state_value%0#0"
      ]
    },
    "46": {
      "op": "app_global_put",
      "stack_out": []
    },
    "47": {
      "op": "bytec_2 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "48": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"admin\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"admin\"",
        "new_state_value%1#0"
      ]
    },
    "50": {
      "op": "app_global_put",
      "stack_out": []
    },
    "51": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "53": {
      "op": "bz main_bare_routing@10",
      "stack_out": []
    },
    "56": {
      "op": "pushbytess 0xd75c04e6 0x27a98df7 0x52733469 0x2bcf04f8 0x11098788 // method \"bootstrap(account,account)void\", method \"register_agent(byte[],uint64,uint64,uint64)void\", method \"issue_payment(uint64,account,string,byte[],byte[])void\", method \"issue_axfer(account,uint64,uint64,byte[],byte[])void\", method \"issue_opt_in(uint64,byte[],byte[])void\"",
      "defined_out": [
        "Method(bootstrap(account,account)void)",
        "Method(issue_axfer(account,uint64,uint64,byte[],byte[])void)",
        "Method(issue_opt_in(uint64,byte[],byte[])void)",
        "Method(issue_payment(uint64,account,string,byte[],byte[])void)",
        "Method(register_agent(byte[],uint64,uint64,uint64)void)"
      ],
      "stack_out": [
        "Method(bootstrap(account,account)void)",
        "Method(register_agent(byte[],uint64,uint64,uint64)void)",
        "Method(issue_payment(uint64,account,string,byte[],byte[])void)",
        "Method(issue_axfer(account,uint64,uint64,byte[],byte[])void)",
        "Method(issue_opt_in(uint64,byte[],byte[])void)"
      ]
    },
    "83": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(bootstrap(account,account)void)",
        "Method(issue_axfer(account,uint64,uint64,byte[],byte[])void)",
        "Method(issue_opt_in(uint64,byte[],byte[])void)",
        "Method(issue_payment(uint64,account,string,byte[],byte[])void)",
        "Method(register_agent(byte[],uint64,uint64,uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(bootstrap(account,account)void)",
        "Method(register_agent(byte[],uint64,uint64,uint64)void)",
        "Method(issue_payment(uint64,account,string,byte[],byte[])void)",
        "Method(issue_axfer(account,uint64,uint64,byte[],byte[])void)",
        "Method(issue_opt_in(uint64,byte[],byte[])void)",
        "tmp%2#0"
      ]
    },
    "86": {
      "op": "match main_bootstrap_route@5 main_register_agent_route@6 main_issue_payment_route@7 main_issue_axfer_route@8 main_issue_opt_in_route@9",
      "stack_out": []
    },
    "98": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "99": {
      "op": "return",
      "stack_out": []
    },
    "100": {
      "block": "main_issue_opt_in_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "102": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "103": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "104": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "106": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "107": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "110": {
      "op": "btoi",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "111": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "114": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%49#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%51#0"
      ]
    },
    "117": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%52#0"
      ]
    },
    "120": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%53#0"
      ]
    },
    "123": {
      "callsub": "smart_contracts.ai_registry.contract.AiRegistry.issue_opt_in",
      "op": "callsub issue_opt_in",
      "stack_out": []
    },
    "126": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "127": {
      "op": "return",
      "stack_out": []
    },
    "128": {
      "block": "main_issue_axfer_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "130": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "131": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "132": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "134": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "135": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "138": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "139": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "141": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "144": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "145": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "148": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "149": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "152": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%42#0"
      ]
    },
    "155": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "158": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%42#0",
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "tmp%42#0",
        "tmp%44#0"
      ]
    },
    "161": {
      "callsub": "smart_contracts.ai_registry.contract.AiRegistry.issue_axfer",
      "op": "callsub issue_axfer",
      "stack_out": []
    },
    "164": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "165": {
      "op": "return",
      "stack_out": []
    },
    "166": {
      "block": "main_issue_payment_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "168": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "169": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "170": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "172": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "173": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "176": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "177": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "180": {
      "op": "btoi",
      "defined_out": [
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "181": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%24#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%26#0"
      ]
    },
    "183": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "186": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0"
      ]
    },
    "189": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "192": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0"
      ]
    },
    "195": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "198": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "tmp%26#0",
        "tmp%28#0",
        "tmp%30#0",
        "tmp%32#0"
      ]
    },
    "201": {
      "callsub": "smart_contracts.ai_registry.contract.AiRegistry.issue_payment",
      "op": "callsub issue_payment",
      "stack_out": []
    },
    "204": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "205": {
      "op": "return",
      "stack_out": []
    },
    "206": {
      "block": "main_register_agent_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "208": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "209": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "210": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "212": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "213": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "216": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "219": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "222": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "223": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "226": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "227": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "230": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "231": {
      "callsub": "smart_contracts.ai_registry.contract.AiRegistry.register_agent",
      "op": "callsub register_agent",
      "stack_out": []
    },
    "234": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "235": {
      "op": "return",
      "stack_out": []
    },
    "236": {
      "block": "main_bootstrap_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "238": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "239": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "240": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "242": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "243": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "246": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "247": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "249": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "252": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "253": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "255": {
      "callsub": "smart_contracts.ai_registry.contract.AiRegistry.bootstrap",
      "op": "callsub bootstrap",
      "stack_out": []
    },
    "258": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "259": {
      "op": "return",
      "stack_out": []
    },
    "260": {
      "block": "main_bare_routing@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "262": {
      "op": "bnz main_after_if_else@12",
      "stack_out": []
    },
    "265": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "267": {
      "op": "!",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "268": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "269": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "270": {
      "op": "return",
      "stack_out": []
    },
    "271": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "274": {
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "276": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "278": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "279": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0"
      ]
    },
    "281": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "283": {
      "op": ">",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "284": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "287": {
      "op": "itxn_begin"
    },
    "288": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "290": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "292": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "294": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "296": {
      "op": "bytec_3 // 0x068101",
      "defined_out": [
        "0x068101",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "297": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "299": {
      "op": "bytec_3 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "300": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "302": {
      "op": "frame_dig -1",
      "defined_out": [
        "fee_source#0 (copy)",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "fee_source#0 (copy)"
      ]
    },
    "304": {
      "op": "switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "310": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "311": {
      "op": "b ensure_budget_while_top@1"
    },
    "314": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "316": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "318": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "321": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "322": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "324": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "327": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "328": {
      "subroutine": "smart_contracts.ai_registry.contract.AiRegistry.bootstrap",
      "params": {
        "lsig_address#0": "bytes",
        "admin_address#0": "bytes"
      },
      "block": "bootstrap",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "331": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "332": {
      "op": "bytec_1 // \"lsig_addr\"",
      "defined_out": [
        "\"lsig_addr\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"lsig_addr\""
      ]
    },
    "333": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "334": {
      "error": "check self.lsig_addr exists",
      "op": "assert // check self.lsig_addr exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "335": {
      "op": "global ZeroAddress",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "337": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "338": {
      "error": "Already bootstrapped",
      "op": "assert // Already bootstrapped",
      "stack_out": []
    },
    "339": {
      "op": "bytec_1 // \"lsig_addr\"",
      "stack_out": [
        "\"lsig_addr\""
      ]
    },
    "340": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"lsig_addr\"",
        "lsig_address#0 (copy)"
      ],
      "stack_out": [
        "\"lsig_addr\"",
        "lsig_address#0 (copy)"
      ]
    },
    "342": {
      "op": "app_global_put",
      "stack_out": []
    },
    "343": {
      "op": "bytec_2 // \"admin\"",
      "defined_out": [
        "\"admin\""
      ],
      "stack_out": [
        "\"admin\""
      ]
    },
    "344": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"admin\"",
        "admin_address#0 (copy)"
      ],
      "stack_out": [
        "\"admin\"",
        "admin_address#0 (copy)"
      ]
    },
    "346": {
      "op": "app_global_put",
      "stack_out": []
    },
    "347": {
      "retsub": true,
      "op": "retsub"
    },
    "348": {
      "subroutine": "smart_contracts.ai_registry.contract.AiRegistry.register_agent",
      "params": {
        "agent_p_key#0": "bytes",
        "permissions#0": "uint64",
        "max_amount#0": "uint64",
        "valid_until_round#0": "uint64"
      },
      "block": "register_agent",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "351": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "353": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "354": {
      "op": "bytec_2 // \"admin\"",
      "defined_out": [
        "\"admin\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"admin\""
      ]
    },
    "355": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "356": {
      "error": "check self.admin exists",
      "op": "assert // check self.admin exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "357": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "358": {
      "error": "Only admin can register agents",
      "op": "assert // Only admin can register agents",
      "stack_out": []
    },
    "359": {
      "op": "frame_dig -3",
      "defined_out": [
        "permissions#0 (copy)"
      ],
      "stack_out": [
        "permissions#0 (copy)"
      ]
    },
    "361": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "362": {
      "op": "frame_dig -2",
      "defined_out": [
        "max_amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "max_amount#0 (copy)"
      ]
    },
    "364": {
      "op": "itob",
      "defined_out": [
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "365": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "366": {
      "op": "frame_dig -1",
      "defined_out": [
        "tmp%4#0",
        "valid_until_round#0 (copy)"
      ],
      "stack_out": [
        "tmp%4#0",
        "valid_until_round#0 (copy)"
      ]
    },
    "368": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "369": {
      "op": "concat",
      "defined_out": [
        "permission_data#0"
      ],
      "stack_out": [
        "permission_data#0"
      ]
    },
    "370": {
      "op": "bytec 4 // 0x6170",
      "defined_out": [
        "0x6170",
        "permission_data#0"
      ],
      "stack_out": [
        "permission_data#0",
        "0x6170"
      ]
    },
    "372": {
      "op": "frame_dig -4",
      "defined_out": [
        "0x6170",
        "agent_p_key#0 (copy)",
        "permission_data#0"
      ],
      "stack_out": [
        "permission_data#0",
        "0x6170",
        "agent_p_key#0 (copy)"
      ]
    },
    "374": {
      "op": "concat",
      "defined_out": [
        "permission_data#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "permission_data#0",
        "tmp%6#0"
      ]
    },
    "375": {
      "op": "dup",
      "defined_out": [
        "permission_data#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ],
      "stack_out": [
        "permission_data#0",
        "tmp%6#0",
        "tmp%6#0 (copy)"
      ]
    },
    "376": {
      "op": "box_del",
      "defined_out": [
        "permission_data#0",
        "tmp%6#0",
        "{box_del}"
      ],
      "stack_out": [
        "permission_data#0",
        "tmp%6#0",
        "{box_del}"
      ]
    },
    "377": {
      "op": "pop",
      "stack_out": [
        "permission_data#0",
        "tmp%6#0"
      ]
    },
    "378": {
      "op": "swap",
      "stack_out": [
        "tmp%6#0",
        "permission_data#0"
      ]
    },
    "379": {
      "op": "box_put",
      "stack_out": []
    },
    "380": {
      "retsub": true,
      "op": "retsub"
    },
    "381": {
      "subroutine": "smart_contracts.ai_registry.contract.AiRegistry._verify_agent_permissions",
      "params": {
        "agent_p_key#0": "bytes",
        "operation_bit#0": "uint64",
        "amount#0": "uint64",
        "current_round#0": "uint64"
      },
      "block": "_verify_agent_permissions",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "384": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "386": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "387": {
      "op": "bytec_1 // \"lsig_addr\"",
      "defined_out": [
        "\"lsig_addr\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"lsig_addr\""
      ]
    },
    "388": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "389": {
      "error": "check self.lsig_addr exists",
      "op": "assert // check self.lsig_addr exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "390": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "391": {
      "error": "Only LSIG can call this method",
      "op": "assert // Only LSIG can call this method",
      "stack_out": []
    },
    "392": {
      "op": "bytec 4 // 0x6170",
      "defined_out": [
        "0x6170"
      ],
      "stack_out": [
        "0x6170"
      ]
    },
    "394": {
      "op": "frame_dig -4",
      "defined_out": [
        "0x6170",
        "agent_p_key#0 (copy)"
      ],
      "stack_out": [
        "0x6170",
        "agent_p_key#0 (copy)"
      ]
    },
    "396": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "397": {
      "op": "dup",
      "defined_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "398": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "399": {
      "op": "bury 1",
      "stack_out": [
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "401": {
      "error": "Agent not registered",
      "op": "assert // Agent not registered",
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "402": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "maybe_exists%2#0"
      ]
    },
    "403": {
      "error": "check self.agent_permissions entry exists",
      "op": "assert // check self.agent_permissions entry exists",
      "stack_out": [
        "permissions_data#0"
      ]
    },
    "404": {
      "op": "dup",
      "defined_out": [
        "permissions_data#0",
        "permissions_data#0 (copy)"
      ],
      "stack_out": [
        "permissions_data#0",
        "permissions_data#0 (copy)"
      ]
    },
    "405": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0"
      ]
    },
    "406": {
      "op": "intc_2 // 8",
      "defined_out": [
        "8",
        "length%0#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "8"
      ]
    },
    "407": {
      "op": "dig 1",
      "defined_out": [
        "8",
        "length%0#0",
        "length%0#0 (copy)",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "8",
        "length%0#0 (copy)"
      ]
    },
    "409": {
      "op": ">=",
      "defined_out": [
        "is_out_of_bounds%0#0",
        "length%0#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "is_out_of_bounds%0#0"
      ]
    },
    "410": {
      "op": "intc_2 // 8",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "is_out_of_bounds%0#0",
        "8"
      ]
    },
    "411": {
      "op": "dig 2",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "is_out_of_bounds%0#0",
        "8",
        "length%0#0 (copy)"
      ]
    },
    "413": {
      "op": "uncover 2",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "8",
        "length%0#0 (copy)",
        "is_out_of_bounds%0#0"
      ]
    },
    "415": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "length%0#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0"
      ]
    },
    "416": {
      "op": "dig 2",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions_data#0 (copy)"
      ]
    },
    "418": {
      "op": "intc_0 // 0",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions_data#0 (copy)",
        "0"
      ]
    },
    "419": {
      "op": "dig 2",
      "defined_out": [
        "0",
        "bounded_index%0#0",
        "bounded_index%0#0 (copy)",
        "length%0#0",
        "permissions_data#0",
        "permissions_data#0 (copy)"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions_data#0 (copy)",
        "0",
        "bounded_index%0#0 (copy)"
      ]
    },
    "421": {
      "op": "substring3",
      "defined_out": [
        "bounded_index%0#0",
        "length%0#0",
        "permissions_data#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "tmp%4#0"
      ]
    },
    "422": {
      "op": "btoi",
      "defined_out": [
        "bounded_index%0#0",
        "length%0#0",
        "permissions#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions#0"
      ]
    },
    "423": {
      "op": "intc_3 // 16",
      "defined_out": [
        "16",
        "bounded_index%0#0",
        "length%0#0",
        "permissions#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions#0",
        "16"
      ]
    },
    "424": {
      "op": "dig 3",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions#0",
        "16",
        "length%0#0 (copy)"
      ]
    },
    "426": {
      "op": ">=",
      "defined_out": [
        "bounded_index%0#0",
        "is_out_of_bounds%2#0",
        "length%0#0",
        "permissions#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions#0",
        "is_out_of_bounds%2#0"
      ]
    },
    "427": {
      "op": "intc_3 // 16",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions#0",
        "is_out_of_bounds%2#0",
        "16"
      ]
    },
    "428": {
      "op": "dig 4",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions#0",
        "is_out_of_bounds%2#0",
        "16",
        "length%0#0 (copy)"
      ]
    },
    "430": {
      "op": "uncover 2",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions#0",
        "16",
        "length%0#0 (copy)",
        "is_out_of_bounds%2#0"
      ]
    },
    "432": {
      "op": "select",
      "defined_out": [
        "bounded_index%0#0",
        "bounded_index%2#0",
        "length%0#0",
        "permissions#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions#0",
        "bounded_index%2#0"
      ]
    },
    "433": {
      "op": "dig 4",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "bounded_index%0#0",
        "permissions#0",
        "bounded_index%2#0",
        "permissions_data#0 (copy)"
      ]
    },
    "435": {
      "op": "uncover 3",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "permissions#0",
        "bounded_index%2#0",
        "permissions_data#0 (copy)",
        "bounded_index%0#0"
      ]
    },
    "437": {
      "op": "dig 2",
      "defined_out": [
        "bounded_index%0#0",
        "bounded_index%2#0",
        "bounded_index%2#0 (copy)",
        "length%0#0",
        "permissions#0",
        "permissions_data#0",
        "permissions_data#0 (copy)"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "permissions#0",
        "bounded_index%2#0",
        "permissions_data#0 (copy)",
        "bounded_index%0#0",
        "bounded_index%2#0 (copy)"
      ]
    },
    "439": {
      "op": "substring3",
      "defined_out": [
        "bounded_index%2#0",
        "length%0#0",
        "permissions#0",
        "permissions_data#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "permissions#0",
        "bounded_index%2#0",
        "tmp%5#0"
      ]
    },
    "440": {
      "op": "btoi",
      "defined_out": [
        "bounded_index%2#0",
        "length%0#0",
        "max_amount#0",
        "permissions#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "permissions#0",
        "bounded_index%2#0",
        "max_amount#0"
      ]
    },
    "441": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "bounded_index%2#0",
        "length%0#0",
        "max_amount#0",
        "permissions#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "permissions#0",
        "bounded_index%2#0",
        "max_amount#0",
        "24"
      ]
    },
    "443": {
      "op": "dig 4",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "permissions#0",
        "bounded_index%2#0",
        "max_amount#0",
        "24",
        "length%0#0 (copy)"
      ]
    },
    "445": {
      "op": ">=",
      "defined_out": [
        "bounded_index%2#0",
        "is_out_of_bounds%4#0",
        "length%0#0",
        "max_amount#0",
        "permissions#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "permissions#0",
        "bounded_index%2#0",
        "max_amount#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "446": {
      "op": "pushint 24 // 24",
      "stack_out": [
        "permissions_data#0",
        "length%0#0",
        "permissions#0",
        "bounded_index%2#0",
        "max_amount#0",
        "is_out_of_bounds%4#0",
        "24"
      ]
    },
    "448": {
      "op": "uncover 5",
      "stack_out": [
        "permissions_data#0",
        "permissions#0",
        "bounded_index%2#0",
        "max_amount#0",
        "is_out_of_bounds%4#0",
        "24",
        "length%0#0"
      ]
    },
    "450": {
      "op": "uncover 2",
      "stack_out": [
        "permissions_data#0",
        "permissions#0",
        "bounded_index%2#0",
        "max_amount#0",
        "24",
        "length%0#0",
        "is_out_of_bounds%4#0"
      ]
    },
    "452": {
      "op": "select",
      "defined_out": [
        "bounded_index%2#0",
        "bounded_index%4#0",
        "max_amount#0",
        "permissions#0",
        "permissions_data#0"
      ],
      "stack_out": [
        "permissions_data#0",
        "permissions#0",
        "bounded_index%2#0",
        "max_amount#0",
        "bounded_index%4#0"
      ]
    },
    "453": {
      "op": "uncover 4",
      "stack_out": [
        "permissions#0",
        "bounded_index%2#0",
        "max_amount#0",
        "bounded_index%4#0",
        "permissions_data#0"
      ]
    },
    "455": {
      "op": "uncover 3",
      "stack_out": [
        "permissions#0",
        "max_amount#0",
        "bounded_index%4#0",
        "permissions_data#0",
        "bounded_index%2#0"
      ]
    },
    "457": {
      "op": "uncover 2",
      "stack_out": [
        "permissions#0",
        "max_amount#0",
        "permissions_data#0",
        "bounded_index%2#0",
        "bounded_index%4#0"
      ]
    },
    "459": {
      "op": "substring3",
      "defined_out": [
        "max_amount#0",
        "permissions#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "permissions#0",
        "max_amount#0",
        "tmp%6#0"
      ]
    },
    "460": {
      "op": "btoi",
      "defined_out": [
        "max_amount#0",
        "permissions#0",
        "valid_until#0"
      ],
      "stack_out": [
        "permissions#0",
        "max_amount#0",
        "valid_until#0"
      ]
    },
    "461": {
      "op": "uncover 2",
      "stack_out": [
        "max_amount#0",
        "valid_until#0",
        "permissions#0"
      ]
    },
    "463": {
      "op": "frame_dig -3",
      "defined_out": [
        "max_amount#0",
        "operation_bit#0 (copy)",
        "permissions#0",
        "valid_until#0"
      ],
      "stack_out": [
        "max_amount#0",
        "valid_until#0",
        "permissions#0",
        "operation_bit#0 (copy)"
      ]
    },
    "465": {
      "op": "getbit",
      "defined_out": [
        "max_amount#0",
        "tmp%7#0",
        "valid_until#0"
      ],
      "stack_out": [
        "max_amount#0",
        "valid_until#0",
        "tmp%7#0"
      ]
    },
    "466": {
      "error": "Operation not allowed for this agent",
      "op": "assert // Operation not allowed for this agent",
      "stack_out": [
        "max_amount#0",
        "valid_until#0"
      ]
    },
    "467": {
      "op": "frame_dig -2",
      "defined_out": [
        "amount#0 (copy)",
        "max_amount#0",
        "valid_until#0"
      ],
      "stack_out": [
        "max_amount#0",
        "valid_until#0",
        "amount#0 (copy)"
      ]
    },
    "469": {
      "op": "uncover 2",
      "stack_out": [
        "valid_until#0",
        "amount#0 (copy)",
        "max_amount#0"
      ]
    },
    "471": {
      "op": "<=",
      "defined_out": [
        "tmp%9#0",
        "valid_until#0"
      ],
      "stack_out": [
        "valid_until#0",
        "tmp%9#0"
      ]
    },
    "472": {
      "error": "Amount exceeds agent's limit",
      "op": "assert // Amount exceeds agent's limit",
      "stack_out": [
        "valid_until#0"
      ]
    },
    "473": {
      "op": "frame_dig -1",
      "defined_out": [
        "current_round#0 (copy)",
        "valid_until#0"
      ],
      "stack_out": [
        "valid_until#0",
        "current_round#0 (copy)"
      ]
    },
    "475": {
      "op": ">=",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "476": {
      "error": "Agent authorization expired",
      "op": "assert // Agent authorization expired",
      "stack_out": []
    },
    "477": {
      "retsub": true,
      "op": "retsub"
    },
    "478": {
      "subroutine": "smart_contracts.ai_registry.contract.AiRegistry.issue_payment",
      "params": {
        "amount#0": "uint64",
        "receiver#0": "bytes",
        "agent_name#0": "bytes",
        "agent_p_key#0": "bytes",
        "signature#0": "bytes"
      },
      "block": "issue_payment",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "481": {
      "op": "pushint 1900 // 1900",
      "defined_out": [
        "1900"
      ],
      "stack_out": [
        "1900"
      ]
    },
    "484": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "1900"
      ],
      "stack_out": [
        "1900",
        "0"
      ]
    },
    "485": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "488": {
      "op": "bytec_0 // 0x6c76",
      "defined_out": [
        "0x6c76"
      ],
      "stack_out": [
        "0x6c76"
      ]
    },
    "489": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "490": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "492": {
      "op": "bz issue_payment_after_if_else@2",
      "stack_out": []
    },
    "495": {
      "op": "bytec_0 // 0x6c76",
      "stack_out": [
        "0x6c76"
      ]
    },
    "496": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "497": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "498": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "499": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "500": {
      "error": "check self.last_valid exists",
      "op": "assert // check self.last_valid exists",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "501": {
      "op": "txn FirstValid",
      "defined_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ]
    },
    "503": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "504": {
      "op": "assert",
      "stack_out": []
    },
    "505": {
      "block": "issue_payment_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "agent_p_key#0 (copy)"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)"
      ]
    },
    "507": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "agent_p_key#0 (copy)"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)",
        "0"
      ]
    },
    "508": {
      "op": "frame_dig -5",
      "defined_out": [
        "0",
        "agent_p_key#0 (copy)",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)",
        "0",
        "amount#0 (copy)"
      ]
    },
    "510": {
      "op": "txn FirstValid",
      "defined_out": [
        "0",
        "agent_p_key#0 (copy)",
        "amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)",
        "0",
        "amount#0 (copy)",
        "tmp%2#0"
      ]
    },
    "512": {
      "callsub": "smart_contracts.ai_registry.contract.AiRegistry._verify_agent_permissions",
      "op": "callsub _verify_agent_permissions",
      "stack_out": []
    },
    "515": {
      "op": "frame_dig -5",
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "517": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "518": {
      "op": "frame_dig -4",
      "defined_out": [
        "receiver#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "receiver#0 (copy)"
      ]
    },
    "520": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "521": {
      "op": "frame_dig -3",
      "defined_out": [
        "agent_name#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "agent_name#0 (copy)"
      ]
    },
    "523": {
      "op": "concat",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "524": {
      "op": "txn FirstValid",
      "defined_out": [
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "526": {
      "op": "itob",
      "defined_out": [
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "527": {
      "op": "concat",
      "defined_out": [
        "payment_data#0"
      ],
      "stack_out": [
        "payment_data#0"
      ]
    },
    "528": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment_data#0",
        "signature#0 (copy)"
      ],
      "stack_out": [
        "payment_data#0",
        "signature#0 (copy)"
      ]
    },
    "530": {
      "op": "frame_dig -2",
      "stack_out": [
        "payment_data#0",
        "signature#0 (copy)",
        "agent_p_key#0 (copy)"
      ]
    },
    "532": {
      "op": "ed25519verify_bare",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "533": {
      "error": "Invalid signature",
      "op": "assert // Invalid signature",
      "stack_out": []
    },
    "534": {
      "op": "itxn_begin"
    },
    "535": {
      "op": "frame_dig -5",
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "537": {
      "op": "itxn_field Amount",
      "stack_out": []
    },
    "539": {
      "op": "frame_dig -4",
      "stack_out": [
        "receiver#0 (copy)"
      ]
    },
    "541": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "543": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "544": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "546": {
      "op": "intc 4 // 100000",
      "defined_out": [
        "100000"
      ],
      "stack_out": [
        "100000"
      ]
    },
    "548": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "550": {
      "op": "itxn_submit"
    },
    "551": {
      "op": "txn FirstValid",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "553": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0"
      ]
    },
    "554": {
      "op": "bytec_0 // 0x6c76",
      "defined_out": [
        "0x6c76",
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0",
        "0x6c76"
      ]
    },
    "555": {
      "op": "swap",
      "stack_out": [
        "0x6c76",
        "new_box_value%1#0"
      ]
    },
    "556": {
      "op": "box_put",
      "stack_out": []
    },
    "557": {
      "retsub": true,
      "op": "retsub"
    },
    "558": {
      "subroutine": "smart_contracts.ai_registry.contract.AiRegistry.issue_axfer",
      "params": {
        "receiver#0": "bytes",
        "amount#0": "uint64",
        "asset_id#0": "uint64",
        "agent_p_key#0": "bytes",
        "signature#0": "bytes"
      },
      "block": "issue_axfer",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "561": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000"
      ],
      "stack_out": [
        "2000"
      ]
    },
    "564": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "2000"
      ],
      "stack_out": [
        "2000",
        "0"
      ]
    },
    "565": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "568": {
      "op": "bytec_0 // 0x6c76",
      "defined_out": [
        "0x6c76"
      ],
      "stack_out": [
        "0x6c76"
      ]
    },
    "569": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "570": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "572": {
      "op": "bz issue_axfer_after_if_else@2",
      "stack_out": []
    },
    "575": {
      "op": "bytec_0 // 0x6c76",
      "stack_out": [
        "0x6c76"
      ]
    },
    "576": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "577": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "578": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "579": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "580": {
      "error": "check self.last_valid exists",
      "op": "assert // check self.last_valid exists",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "581": {
      "op": "txn FirstValid",
      "defined_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ]
    },
    "583": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "584": {
      "op": "assert",
      "stack_out": []
    },
    "585": {
      "block": "issue_axfer_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "agent_p_key#0 (copy)"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)"
      ]
    },
    "587": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "agent_p_key#0 (copy)"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)",
        "1"
      ]
    },
    "588": {
      "op": "frame_dig -4",
      "defined_out": [
        "1",
        "agent_p_key#0 (copy)",
        "amount#0 (copy)"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)",
        "1",
        "amount#0 (copy)"
      ]
    },
    "590": {
      "op": "txn FirstValid",
      "defined_out": [
        "1",
        "agent_p_key#0 (copy)",
        "amount#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)",
        "1",
        "amount#0 (copy)",
        "tmp%2#0"
      ]
    },
    "592": {
      "callsub": "smart_contracts.ai_registry.contract.AiRegistry._verify_agent_permissions",
      "op": "callsub _verify_agent_permissions",
      "stack_out": []
    },
    "595": {
      "op": "frame_dig -4",
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "597": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "598": {
      "op": "frame_dig -5",
      "defined_out": [
        "receiver#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "receiver#0 (copy)"
      ]
    },
    "600": {
      "op": "swap",
      "stack_out": [
        "receiver#0 (copy)",
        "tmp%3#0"
      ]
    },
    "601": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "602": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset_id#0 (copy)",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "asset_id#0 (copy)"
      ]
    },
    "604": {
      "op": "itob",
      "defined_out": [
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "tmp%5#0"
      ]
    },
    "605": {
      "op": "concat",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "606": {
      "op": "txn FirstValid",
      "defined_out": [
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "608": {
      "op": "itob",
      "defined_out": [
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "tmp%8#0"
      ]
    },
    "609": {
      "op": "concat",
      "defined_out": [
        "verification_data#0"
      ],
      "stack_out": [
        "verification_data#0"
      ]
    },
    "610": {
      "op": "frame_dig -1",
      "defined_out": [
        "signature#0 (copy)",
        "verification_data#0"
      ],
      "stack_out": [
        "verification_data#0",
        "signature#0 (copy)"
      ]
    },
    "612": {
      "op": "frame_dig -2",
      "stack_out": [
        "verification_data#0",
        "signature#0 (copy)",
        "agent_p_key#0 (copy)"
      ]
    },
    "614": {
      "op": "ed25519verify_bare",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "615": {
      "error": "Invalid signature",
      "op": "assert // Invalid signature",
      "stack_out": []
    },
    "616": {
      "op": "itxn_begin"
    },
    "617": {
      "op": "frame_dig -3",
      "stack_out": [
        "asset_id#0 (copy)"
      ]
    },
    "619": {
      "op": "itxn_field XferAsset",
      "stack_out": []
    },
    "621": {
      "op": "frame_dig -4",
      "stack_out": [
        "amount#0 (copy)"
      ]
    },
    "623": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "625": {
      "op": "frame_dig -5",
      "stack_out": [
        "receiver#0 (copy)"
      ]
    },
    "627": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "629": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "631": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "633": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "634": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "636": {
      "op": "itxn_submit"
    },
    "637": {
      "op": "txn FirstValid",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "639": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0"
      ]
    },
    "640": {
      "op": "bytec_0 // 0x6c76",
      "defined_out": [
        "0x6c76",
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0",
        "0x6c76"
      ]
    },
    "641": {
      "op": "swap",
      "stack_out": [
        "0x6c76",
        "new_box_value%1#0"
      ]
    },
    "642": {
      "op": "box_put",
      "stack_out": []
    },
    "643": {
      "retsub": true,
      "op": "retsub"
    },
    "644": {
      "subroutine": "smart_contracts.ai_registry.contract.AiRegistry.issue_opt_in",
      "params": {
        "asset_id#0": "uint64",
        "agent_p_key#0": "bytes",
        "signature#0": "bytes"
      },
      "block": "issue_opt_in",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "647": {
      "op": "pushint 2000 // 2000",
      "defined_out": [
        "2000"
      ],
      "stack_out": [
        "2000"
      ]
    },
    "650": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "2000"
      ],
      "stack_out": [
        "2000",
        "0"
      ]
    },
    "651": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "654": {
      "op": "bytec_0 // 0x6c76",
      "defined_out": [
        "0x6c76"
      ],
      "stack_out": [
        "0x6c76"
      ]
    },
    "655": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "656": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "658": {
      "op": "bz issue_opt_in_after_if_else@2",
      "stack_out": []
    },
    "661": {
      "op": "bytec_0 // 0x6c76",
      "stack_out": [
        "0x6c76"
      ]
    },
    "662": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "663": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "664": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "665": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "666": {
      "error": "check self.last_valid exists",
      "op": "assert // check self.last_valid exists",
      "stack_out": [
        "maybe_value_converted%0#0"
      ]
    },
    "667": {
      "op": "txn FirstValid",
      "defined_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ]
    },
    "669": {
      "op": "<",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "670": {
      "op": "assert",
      "stack_out": []
    },
    "671": {
      "block": "issue_opt_in_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "agent_p_key#0 (copy)"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)"
      ]
    },
    "673": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "agent_p_key#0 (copy)"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)",
        "2"
      ]
    },
    "675": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "2",
        "agent_p_key#0 (copy)"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)",
        "2",
        "0"
      ]
    },
    "676": {
      "op": "txn FirstValid",
      "defined_out": [
        "0",
        "2",
        "agent_p_key#0 (copy)",
        "tmp%2#0"
      ],
      "stack_out": [
        "agent_p_key#0 (copy)",
        "2",
        "0",
        "tmp%2#0"
      ]
    },
    "678": {
      "callsub": "smart_contracts.ai_registry.contract.AiRegistry._verify_agent_permissions",
      "op": "callsub _verify_agent_permissions",
      "stack_out": []
    },
    "681": {
      "op": "frame_dig -3",
      "defined_out": [
        "asset_id#0 (copy)"
      ],
      "stack_out": [
        "asset_id#0 (copy)"
      ]
    },
    "683": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "684": {
      "op": "txn FirstValid",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "686": {
      "op": "itob",
      "defined_out": [
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "687": {
      "op": "concat",
      "defined_out": [
        "verification_data#0"
      ],
      "stack_out": [
        "verification_data#0"
      ]
    },
    "688": {
      "op": "frame_dig -1",
      "defined_out": [
        "signature#0 (copy)",
        "verification_data#0"
      ],
      "stack_out": [
        "verification_data#0",
        "signature#0 (copy)"
      ]
    },
    "690": {
      "op": "frame_dig -2",
      "stack_out": [
        "verification_data#0",
        "signature#0 (copy)",
        "agent_p_key#0 (copy)"
      ]
    },
    "692": {
      "op": "ed25519verify_bare",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "693": {
      "error": "Invalid signature",
      "op": "assert // Invalid signature",
      "stack_out": []
    },
    "694": {
      "op": "itxn_begin"
    },
    "695": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "697": {
      "op": "frame_dig -3",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset_id#0 (copy)"
      ]
    },
    "699": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "701": {
      "op": "intc_0 // 0",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "702": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "704": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "706": {
      "op": "pushint 4 // axfer",
      "defined_out": [
        "axfer"
      ],
      "stack_out": [
        "axfer"
      ]
    },
    "708": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "710": {
      "op": "intc 4 // 100000",
      "defined_out": [
        "100000"
      ],
      "stack_out": [
        "100000"
      ]
    },
    "712": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "714": {
      "op": "itxn_submit"
    },
    "715": {
      "op": "txn FirstValid",
      "defined_out": [
        "new_box_value%0#0"
      ],
      "stack_out": [
        "new_box_value%0#0"
      ]
    },
    "717": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0"
      ]
    },
    "718": {
      "op": "bytec_0 // 0x6c76",
      "defined_out": [
        "0x6c76",
        "new_box_value%1#0"
      ],
      "stack_out": [
        "new_box_value%1#0",
        "0x6c76"
      ]
    },
    "719": {
      "op": "swap",
      "stack_out": [
        "0x6c76",
        "new_box_value%1#0"
      ]
    },
    "720": {
      "op": "box_put",
      "stack_out": []
    },
    "721": {
      "retsub": true,
      "op": "retsub"
    }
  }
}
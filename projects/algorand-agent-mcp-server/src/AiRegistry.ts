/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AiRegistry","structs":{},"methods":[{"name":"bootstrap","args":[{"type":"account","name":"lsig_address"},{"type":"account","name":"admin_address"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"register_agent","args":[{"type":"byte[]","name":"agent_p_key"},{"type":"uint64","name":"permissions"},{"type":"uint64","name":"max_amount"},{"type":"uint64","name":"valid_until_round"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"issue_payment","args":[{"type":"uint64","name":"amount"},{"type":"account","name":"receiver"},{"type":"string","name":"agent_name"},{"type":"byte[]","name":"agent_p_key"},{"type":"byte[]","name":"signature"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"issue_axfer","args":[{"type":"account","name":"receiver"},{"type":"uint64","name":"amount"},{"type":"uint64","name":"asset_id"},{"type":"byte[]","name":"agent_p_key"},{"type":"byte[]","name":"signature"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"issue_opt_in","args":[{"type":"uint64","name":"asset_id"},{"type":"byte[]","name":"agent_p_key"},{"type":"byte[]","name":"signature"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":0,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"lsig_addr":{"keyType":"AVMString","valueType":"AVMBytes","key":"bHNpZ19hZGRy"},"admin":{"keyType":"AVMString","valueType":"AVMBytes","key":"YWRtaW4="}},"local":{},"box":{"last_valid":{"keyType":"AVMBytes","valueType":"AVMUint64","key":"bHY="}}},"maps":{"global":{},"local":{},"box":{"agent_permissions":{"keyType":"AVMBytes","valueType":"AVMBytes","prefix":"YXA="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[476],"errorMessage":"Agent authorization expired"},{"pc":[401],"errorMessage":"Agent not registered"},{"pc":[338],"errorMessage":"Already bootstrapped"},{"pc":[472],"errorMessage":"Amount exceeds agent's limit"},{"pc":[533,615,693],"errorMessage":"Invalid signature"},{"pc":[103,131,169,209,239],"errorMessage":"OnCompletion is not NoOp"},{"pc":[391],"errorMessage":"Only LSIG can call this method"},{"pc":[358],"errorMessage":"Only admin can register agents"},{"pc":[466],"errorMessage":"Operation not allowed for this agent"},{"pc":[268],"errorMessage":"can only call when creating"},{"pc":[106,134,172,212,242],"errorMessage":"can only call when not creating"},{"pc":[356],"errorMessage":"check self.admin exists"},{"pc":[403],"errorMessage":"check self.agent_permissions entry exists"},{"pc":[500,580,666],"errorMessage":"check self.last_valid exists"},{"pc":[334,389],"errorMessage":"check self.lsig_addr exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiAFAAEIEKCNBiYFAmx2CWxzaWdfYWRkcgVhZG1pbgMGgQECYXAxGEAACCkyA2cqMgNnMRtBAMyCBQTXXATmBCepjfcEUnM0aQQrzwT4BBEJh4g2GgCOBQCKAGwARAAeAAIiQzEZFEQxGEQ2GgEXNhoCVwIANhoDVwIAiAIGI0MxGRREMRhENhoBF8AcNhoCFzYaAxc2GgRXAgA2GgVXAgCIAYojQzEZFEQxGEQ2GgEXNhoCF8AcNhoDVwIANhoEVwIANhoFVwIAiAESI0MxGRREMRhENhoBVwIANhoCFzYaAxc2GgQXiAByI0MxGRREMRhENhoBF8AcNhoCF8AciABGI0MxGUD/WTEYFEQjQ4oCAIv+gQoIiwAyDA1BACixgQayEIEFshkrsh4rsh+L/40CAAsABLNC/90yALIBQv/1IrIBQv/viYoCACIpZUQyAxJEKYv+ZyqL/2eJigQAMQAiKmVEEkSL/RaL/hZQi/8WUCcEi/xQSbxITL+JigQAMQAiKWVEEkQnBIv8UEm9RQFEvkRJFSRLAQ8kSwJPAk1LAiJLAlIXJUsDDyVLBE8CTUsETwNLAlIXgRhLBA+BGE8FTwJNTwRPA08CUhdPAov9U0SL/k8CDkSL/w9EiYoFAIHsDiKI/ycovUUBQQAKKL5MF0xEMQIMRIv+Iov7MQKI/3qL+xaL/FCL/VAxAhZQi/+L/oREsYv7sgiL/LIHI7IQIQSyAbMxAhYoTL+JigUAgdAPIoj+1yi9RQFBAAoovkwXTEQxAgxEi/4ji/wxAoj/Kov8Fov7TFCL/RZQMQIWUIv/i/6ERLGL/bIRi/yyEov7shSBBLIQIrIBszECFihMv4mKAwCB0A8iiP6BKL1FAUEACii+TBdMRDECDESL/oECIjECiP7Ui/0WMQIWUIv/i/6ERLEyCov9shEishKyFIEEshAhBLIBszECFihMv4k=","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":6,"patch":1}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AiRegistry contract
 */
export type AiRegistryArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'bootstrap(account,account)void': {
      lsigAddress: Uint8Array | string
      adminAddress: Uint8Array | string
    }
    'register_agent(byte[],uint64,uint64,uint64)void': {
      agentPKey: Uint8Array
      permissions: bigint | number
      maxAmount: bigint | number
      validUntilRound: bigint | number
    }
    'issue_payment(uint64,account,string,byte[],byte[])void': {
      amount: bigint | number
      receiver: Uint8Array | string
      agentName: string
      agentPKey: Uint8Array
      signature: Uint8Array
    }
    'issue_axfer(account,uint64,uint64,byte[],byte[])void': {
      receiver: Uint8Array | string
      amount: bigint | number
      assetId: bigint | number
      agentPKey: Uint8Array
      signature: Uint8Array
    }
    'issue_opt_in(uint64,byte[],byte[])void': {
      assetId: bigint | number
      agentPKey: Uint8Array
      signature: Uint8Array
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'bootstrap(account,account)void': [lsigAddress: Uint8Array | string, adminAddress: Uint8Array | string]
    'register_agent(byte[],uint64,uint64,uint64)void': [agentPKey: Uint8Array, permissions: bigint | number, maxAmount: bigint | number, validUntilRound: bigint | number]
    'issue_payment(uint64,account,string,byte[],byte[])void': [amount: bigint | number, receiver: Uint8Array | string, agentName: string, agentPKey: Uint8Array, signature: Uint8Array]
    'issue_axfer(account,uint64,uint64,byte[],byte[])void': [receiver: Uint8Array | string, amount: bigint | number, assetId: bigint | number, agentPKey: Uint8Array, signature: Uint8Array]
    'issue_opt_in(uint64,byte[],byte[])void': [assetId: bigint | number, agentPKey: Uint8Array, signature: Uint8Array]
  }
}

/**
 * The return type for each method
 */
export type AiRegistryReturns = {
  'bootstrap(account,account)void': void
  'register_agent(byte[],uint64,uint64,uint64)void': void
  'issue_payment(uint64,account,string,byte[],byte[])void': void
  'issue_axfer(account,uint64,uint64,byte[],byte[])void': void
  'issue_opt_in(uint64,byte[],byte[])void': void
}

/**
 * Defines the types of available calls and state of the AiRegistry smart contract.
 */
export type AiRegistryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap(account,account)void' | 'bootstrap', {
      argsObj: AiRegistryArgs['obj']['bootstrap(account,account)void']
      argsTuple: AiRegistryArgs['tuple']['bootstrap(account,account)void']
      returns: AiRegistryReturns['bootstrap(account,account)void']
    }>
    & Record<'register_agent(byte[],uint64,uint64,uint64)void' | 'register_agent', {
      argsObj: AiRegistryArgs['obj']['register_agent(byte[],uint64,uint64,uint64)void']
      argsTuple: AiRegistryArgs['tuple']['register_agent(byte[],uint64,uint64,uint64)void']
      returns: AiRegistryReturns['register_agent(byte[],uint64,uint64,uint64)void']
    }>
    & Record<'issue_payment(uint64,account,string,byte[],byte[])void' | 'issue_payment', {
      argsObj: AiRegistryArgs['obj']['issue_payment(uint64,account,string,byte[],byte[])void']
      argsTuple: AiRegistryArgs['tuple']['issue_payment(uint64,account,string,byte[],byte[])void']
      returns: AiRegistryReturns['issue_payment(uint64,account,string,byte[],byte[])void']
    }>
    & Record<'issue_axfer(account,uint64,uint64,byte[],byte[])void' | 'issue_axfer', {
      argsObj: AiRegistryArgs['obj']['issue_axfer(account,uint64,uint64,byte[],byte[])void']
      argsTuple: AiRegistryArgs['tuple']['issue_axfer(account,uint64,uint64,byte[],byte[])void']
      returns: AiRegistryReturns['issue_axfer(account,uint64,uint64,byte[],byte[])void']
    }>
    & Record<'issue_opt_in(uint64,byte[],byte[])void' | 'issue_opt_in', {
      argsObj: AiRegistryArgs['obj']['issue_opt_in(uint64,byte[],byte[])void']
      argsTuple: AiRegistryArgs['tuple']['issue_opt_in(uint64,byte[],byte[])void']
      returns: AiRegistryReturns['issue_opt_in(uint64,byte[],byte[])void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        lsigAddr: BinaryState
        admin: BinaryState
      }
      maps: {}
    }
    box: {
      keys: {
        lastValid: bigint
      }
      maps: {
        agentPermissions: Map<Uint8Array | string, Uint8Array>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AiRegistrySignatures = keyof AiRegistryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AiRegistryNonVoidMethodSignatures = keyof AiRegistryTypes['methods'] extends infer T ? T extends keyof AiRegistryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AiRegistry smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AiRegistrySignatures> = AiRegistryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AiRegistry smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AiRegistrySignatures> = AiRegistryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AiRegistryTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AiRegistryTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AiRegistryCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AiRegistryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AiRegistryCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AiRegistry smart contract
 */
export abstract class AiRegistryParamsFactory {
  /**
   * Constructs a no op call for the bootstrap(account,account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static bootstrap(params: CallParams<AiRegistryArgs['obj']['bootstrap(account,account)void'] | AiRegistryArgs['tuple']['bootstrap(account,account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'bootstrap(account,account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.lsigAddress, params.args.adminAddress],
    }
  }
  /**
   * Constructs a no op call for the register_agent(byte[],uint64,uint64,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static registerAgent(params: CallParams<AiRegistryArgs['obj']['register_agent(byte[],uint64,uint64,uint64)void'] | AiRegistryArgs['tuple']['register_agent(byte[],uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'register_agent(byte[],uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.agentPKey, params.args.permissions, params.args.maxAmount, params.args.validUntilRound],
    }
  }
  /**
   * Constructs a no op call for the issue_payment(uint64,account,string,byte[],byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static issuePayment(params: CallParams<AiRegistryArgs['obj']['issue_payment(uint64,account,string,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_payment(uint64,account,string,byte[],byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'issue_payment(uint64,account,string,byte[],byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount, params.args.receiver, params.args.agentName, params.args.agentPKey, params.args.signature],
    }
  }
  /**
   * Constructs a no op call for the issue_axfer(account,uint64,uint64,byte[],byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static issueAxfer(params: CallParams<AiRegistryArgs['obj']['issue_axfer(account,uint64,uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_axfer(account,uint64,uint64,byte[],byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'issue_axfer(account,uint64,uint64,byte[],byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.receiver, params.args.amount, params.args.assetId, params.args.agentPKey, params.args.signature],
    }
  }
  /**
   * Constructs a no op call for the issue_opt_in(uint64,byte[],byte[])void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static issueOptIn(params: CallParams<AiRegistryArgs['obj']['issue_opt_in(uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_opt_in(uint64,byte[],byte[])void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'issue_opt_in(uint64,byte[],byte[])void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetId, params.args.agentPKey, params.args.signature],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AiRegistry smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AiRegistryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AiRegistryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AiRegistryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AiRegistryClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AiRegistry smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AiRegistryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AiRegistryClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AiRegistry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AiRegistry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AiRegistry smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AiRegistryClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AiRegistry smart contract
 */
export class AiRegistryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AiRegistryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AiRegistry app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AiRegistryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AiRegistryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AiRegistryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AiRegistryClient> {
    return new AiRegistryClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AiRegistryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AiRegistryClient> {
    return new AiRegistryClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AiRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `bootstrap(account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    bootstrap: (params: CallParams<AiRegistryArgs['obj']['bootstrap(account,account)void'] | AiRegistryArgs['tuple']['bootstrap(account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiRegistryParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `register_agent(byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    registerAgent: (params: CallParams<AiRegistryArgs['obj']['register_agent(byte[],uint64,uint64,uint64)void'] | AiRegistryArgs['tuple']['register_agent(byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiRegistryParamsFactory.registerAgent(params))
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `issue_payment(uint64,account,string,byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    issuePayment: (params: CallParams<AiRegistryArgs['obj']['issue_payment(uint64,account,string,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_payment(uint64,account,string,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiRegistryParamsFactory.issuePayment(params))
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `issue_axfer(account,uint64,uint64,byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    issueAxfer: (params: CallParams<AiRegistryArgs['obj']['issue_axfer(account,uint64,uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_axfer(account,uint64,uint64,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiRegistryParamsFactory.issueAxfer(params))
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `issue_opt_in(uint64,byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    issueOptIn: (params: CallParams<AiRegistryArgs['obj']['issue_opt_in(uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_opt_in(uint64,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AiRegistryParamsFactory.issueOptIn(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AiRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `bootstrap(account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    bootstrap: (params: CallParams<AiRegistryArgs['obj']['bootstrap(account,account)void'] | AiRegistryArgs['tuple']['bootstrap(account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiRegistryParamsFactory.bootstrap(params))
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `register_agent(byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    registerAgent: (params: CallParams<AiRegistryArgs['obj']['register_agent(byte[],uint64,uint64,uint64)void'] | AiRegistryArgs['tuple']['register_agent(byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiRegistryParamsFactory.registerAgent(params))
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `issue_payment(uint64,account,string,byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    issuePayment: (params: CallParams<AiRegistryArgs['obj']['issue_payment(uint64,account,string,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_payment(uint64,account,string,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiRegistryParamsFactory.issuePayment(params))
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `issue_axfer(account,uint64,uint64,byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    issueAxfer: (params: CallParams<AiRegistryArgs['obj']['issue_axfer(account,uint64,uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_axfer(account,uint64,uint64,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiRegistryParamsFactory.issueAxfer(params))
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `issue_opt_in(uint64,byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    issueOptIn: (params: CallParams<AiRegistryArgs['obj']['issue_opt_in(uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_opt_in(uint64,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AiRegistryParamsFactory.issueOptIn(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AiRegistry smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `bootstrap(account,account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    bootstrap: async (params: CallParams<AiRegistryArgs['obj']['bootstrap(account,account)void'] | AiRegistryArgs['tuple']['bootstrap(account,account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiRegistryParamsFactory.bootstrap(params))
      return {...result, return: result.return as unknown as (undefined | AiRegistryReturns['bootstrap(account,account)void'])}
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `register_agent(byte[],uint64,uint64,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    registerAgent: async (params: CallParams<AiRegistryArgs['obj']['register_agent(byte[],uint64,uint64,uint64)void'] | AiRegistryArgs['tuple']['register_agent(byte[],uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiRegistryParamsFactory.registerAgent(params))
      return {...result, return: result.return as unknown as (undefined | AiRegistryReturns['register_agent(byte[],uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `issue_payment(uint64,account,string,byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    issuePayment: async (params: CallParams<AiRegistryArgs['obj']['issue_payment(uint64,account,string,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_payment(uint64,account,string,byte[],byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiRegistryParamsFactory.issuePayment(params))
      return {...result, return: result.return as unknown as (undefined | AiRegistryReturns['issue_payment(uint64,account,string,byte[],byte[])void'])}
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `issue_axfer(account,uint64,uint64,byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    issueAxfer: async (params: CallParams<AiRegistryArgs['obj']['issue_axfer(account,uint64,uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_axfer(account,uint64,uint64,byte[],byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiRegistryParamsFactory.issueAxfer(params))
      return {...result, return: result.return as unknown as (undefined | AiRegistryReturns['issue_axfer(account,uint64,uint64,byte[],byte[])void'])}
    },

    /**
     * Makes a call to the AiRegistry smart contract using the `issue_opt_in(uint64,byte[],byte[])void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    issueOptIn: async (params: CallParams<AiRegistryArgs['obj']['issue_opt_in(uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_opt_in(uint64,byte[],byte[])void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AiRegistryParamsFactory.issueOptIn(params))
      return {...result, return: result.return as unknown as (undefined | AiRegistryReturns['issue_opt_in(uint64,byte[],byte[])void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AiRegistryClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AiRegistry app
   */
  state = {
    /**
     * Methods to access global state for the current AiRegistry app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          lsigAddr: new BinaryStateValue(result.lsig_addr),
          admin: new BinaryStateValue(result.admin),
        }
      },
      /**
       * Get the current value of the lsig_addr key in global state
       */
      lsigAddr: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("lsig_addr")) as Uint8Array | undefined) },
      /**
       * Get the current value of the admin key in global state
       */
      admin: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("admin")) as Uint8Array | undefined) },
    },
    /**
     * Methods to access box state for the current AiRegistry app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          lastValid: result.last_valid,
        }
      },
      /**
       * Get the current value of the last_valid key in box state
       */
      lastValid: async (): Promise<bigint | undefined> => { return (await this.appClient.state.box.getValue("last_valid")) as bigint | undefined },
      /**
       * Get values from the agent_permissions map in box state
       */
      agentPermissions: {
        /**
         * Get all current values of the agent_permissions map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, Uint8Array>> => { return (await this.appClient.state.box.getMap("agent_permissions")) as Map<Uint8Array, Uint8Array> },
        /**
         * Get a current value of the agent_permissions map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<Uint8Array | undefined> => { return await this.appClient.state.box.getMapValue("agent_permissions", key) as Uint8Array | undefined },
      },
    },
  }

  public newGroup(): AiRegistryComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a bootstrap(account,account)void method call against the AiRegistry contract
       */
      bootstrap(params: CallParams<AiRegistryArgs['obj']['bootstrap(account,account)void'] | AiRegistryArgs['tuple']['bootstrap(account,account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.bootstrap(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a register_agent(byte[],uint64,uint64,uint64)void method call against the AiRegistry contract
       */
      registerAgent(params: CallParams<AiRegistryArgs['obj']['register_agent(byte[],uint64,uint64,uint64)void'] | AiRegistryArgs['tuple']['register_agent(byte[],uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.registerAgent(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a issue_payment(uint64,account,string,byte[],byte[])void method call against the AiRegistry contract
       */
      issuePayment(params: CallParams<AiRegistryArgs['obj']['issue_payment(uint64,account,string,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_payment(uint64,account,string,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.issuePayment(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a issue_axfer(account,uint64,uint64,byte[],byte[])void method call against the AiRegistry contract
       */
      issueAxfer(params: CallParams<AiRegistryArgs['obj']['issue_axfer(account,uint64,uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_axfer(account,uint64,uint64,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.issueAxfer(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a issue_opt_in(uint64,byte[],byte[])void method call against the AiRegistry contract
       */
      issueOptIn(params: CallParams<AiRegistryArgs['obj']['issue_opt_in(uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_opt_in(uint64,byte[],byte[])void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.issueOptIn(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AiRegistry contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AiRegistryComposer
  }
}
export type AiRegistryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(account,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(params?: CallParams<AiRegistryArgs['obj']['bootstrap(account,account)void'] | AiRegistryArgs['tuple']['bootstrap(account,account)void']>): AiRegistryComposer<[...TReturns, AiRegistryReturns['bootstrap(account,account)void'] | undefined]>

  /**
   * Calls the register_agent(byte[],uint64,uint64,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  registerAgent(params?: CallParams<AiRegistryArgs['obj']['register_agent(byte[],uint64,uint64,uint64)void'] | AiRegistryArgs['tuple']['register_agent(byte[],uint64,uint64,uint64)void']>): AiRegistryComposer<[...TReturns, AiRegistryReturns['register_agent(byte[],uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the issue_payment(uint64,account,string,byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  issuePayment(params?: CallParams<AiRegistryArgs['obj']['issue_payment(uint64,account,string,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_payment(uint64,account,string,byte[],byte[])void']>): AiRegistryComposer<[...TReturns, AiRegistryReturns['issue_payment(uint64,account,string,byte[],byte[])void'] | undefined]>

  /**
   * Calls the issue_axfer(account,uint64,uint64,byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  issueAxfer(params?: CallParams<AiRegistryArgs['obj']['issue_axfer(account,uint64,uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_axfer(account,uint64,uint64,byte[],byte[])void']>): AiRegistryComposer<[...TReturns, AiRegistryReturns['issue_axfer(account,uint64,uint64,byte[],byte[])void'] | undefined]>

  /**
   * Calls the issue_opt_in(uint64,byte[],byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  issueOptIn(params?: CallParams<AiRegistryArgs['obj']['issue_opt_in(uint64,byte[],byte[])void'] | AiRegistryArgs['tuple']['issue_opt_in(uint64,byte[],byte[])void']>): AiRegistryComposer<[...TReturns, AiRegistryReturns['issue_opt_in(uint64,byte[],byte[])void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AiRegistry smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AiRegistryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AiRegistryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AiRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AiRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AiRegistryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AiRegistryComposerResults<TReturns>>
}
export type AiRegistryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

